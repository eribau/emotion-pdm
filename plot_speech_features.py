import os
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd


data_folder = 'emotion_analysis'

dict = {}

for filename in os.listdir(data_folder):
    if filename.endswith(".csv"):
        # do something
        emotion = os.path.splitext(filename)[0]
        data_file = os.path.join(data_folder, filename)
        data = pd.read_csv(data_file, delimiter=';', header=0)

        for (feature, feature_data) in data.iteritems():
            if feature in dict.keys():
                dict[feature].append({emotion: feature_data.values})
            else:
                dict[feature] = [{emotion: feature_data.values}]
# print(dict)
# Format of of the data in the dictionary
# {
#   "frameIndex": [
#       {"anger": array([0.0, 0.0, 0.0])},
#       {"happiness": array([0.0, 0.0, 0.0])}
#     ]
#   "frameTime": {
#       "anger": [0.0, 0.0, 0.0],
#       "happiness": [0.0, 0.0, 0.0]
#   }
#  ...
# }


fig = plt.figure()

test_data = {'F0final__Turn_duration': [{'neutral': [1.55, 1.37, 1.5 , 3.1 , 1.72, 2.32, 2.88, 3.58, 2.52, 2.19, 2.15,
       1.7 , 1.73, 1.97, 3.19, 2.02, 2.29, 2.99, 3.66, 2.79, 2.31, 1.62,
       1.7 , 3.01, 1.77, 2.4 , 2.64, 3.75, 2.65, 2.17, 1.74, 1.59, 1.98,
       2.66, 1.57, 1.47, 1.62, 3.26, 2.16, 2.63, 3.56, 2.35, 2.07, 1.66,
       1.67, 3.12, 2.92, 1.45, 1.49, 3.12, 1.85, 2.37, 2.72, 3.5 , 2.61,
       2.3 , 1.55, 1.37, 3.  , 2.03, 2.51, 2.83, 1.99, 1.56, 1.55, 1.63,
       3.06, 1.82, 2.29, 2.73, 3.14, 2.39, 2.15, 2.14, 1.71, 1.6 , 1.76,
       1.94, 3.83]}, {'disgust': [3.14, 2.56, 2.37, 1.46, 5.09, 3.28, 3.67, 5.  , 3.73, 2.33, 1.85,
       2.99, 3.23, 5.5 , 1.76, 2.26, 2.07, 4.13, 3.03, 4.45, 2.62, 2.78,
       3.08, 2.49, 2.85, 3.37, 3.23, 4.99, 4.18, 3.61, 2.49, 2.38, 3.93,
       2.33, 2.91, 2.37, 2.88, 2.42, 2.59, 5.42, 2.93, 3.36, 4.12, 5.9 ,
       4.96, 3.16]}, {'happiness': [1.83, 1.94, 1.63, 3.13, 2.07, 2.38, 2.3 , 2.23, 1.55, 1.74, 3.03,
       1.9 , 2.42, 2.45, 2.71, 3.55, 2.7 , 2.4 , 1.77, 1.42, 3.08, 3.25,
       1.46, 1.47, 2.37, 2.15, 1.72, 1.82, 3.48, 3.86, 2.49, 3.05, 3.76,
       2.97, 1.8 , 3.24, 1.82, 2.01, 1.72, 1.95, 2.57, 3.38, 3.87, 2.81,
       2.9 , 2.09, 1.62, 3.18, 3.06, 2.02, 2.5 , 2.48, 2.77, 2.46, 1.56,
       1.73, 2.63, 1.9 , 1.87, 2.39, 2.03, 1.98, 3.55, 2.31, 2.36, 2.58,
       3.47, 3.8 , 3.59, 3.44, 2.52]}, {'anger': [1.81, 2.06, 1.43, 1.98, 3.38, 2.9 , 2.02, 2.11, 2.86, 3.12, 3.78,
       2.83, 2.1 , 2.38, 1.55, 1.63, 1.8 , 1.74, 2.86, 2.15, 3.24, 3.52,
       4.02, 3.1 , 3.25, 3.07, 1.64, 1.59, 1.77, 3.34, 3.12, 1.92, 2.25,
       2.09, 2.66, 2.56, 3.63, 2.56, 2.14, 2.11, 2.04, 2.79, 1.75, 3.69,
       1.91, 2.8 , 4.42, 3.15, 2.58, 1.85, 2.36, 2.61, 3.97, 2.17, 2.75,
       3.18, 4.  , 5.15, 3.75, 2.82, 2.29, 1.44, 1.4 , 1.51, 3.42, 2.27,
       2.17, 2.72, 2.74, 2.58, 2.37, 2.48, 2.3 , 1.6 , 1.93, 2.82, 3.32,
       2.19, 2.19, 2.35, 3.55, 2.33, 2.14, 2.62, 1.57, 1.91, 1.95, 2.03,
       1.67, 2.45, 3.94, 2.99, 2.  , 2.89, 2.68, 2.23, 3.82, 3.48, 2.71,
       2.59, 1.77, 1.74, 1.76, 1.88, 1.75, 3.03, 2.57, 2.7 , 2.56, 3.3 ,
       2.96, 2.59, 2.57, 2.13, 1.71, 2.5 , 1.88, 3.68, 3.74, 2.32, 2.54,
       2.6 , 3.12, 3.86, 3.63, 2.35, 2.46]}, {'anxiety': [1.44, 3.02, 3.02, 2.76, 1.79, 1.52, 1.62, 2.61, 3.12, 2.59, 1.59,
       1.61, 1.54, 2.54, 1.53, 1.54, 2.02, 2.4 , 1.91, 1.49, 1.44, 1.47,
       2.85, 1.84, 1.96, 2.42, 2.7 , 2.38, 2.88, 1.16, 3.17, 1.42, 2.17,
       2.41, 1.97, 1.5 , 1.4 , 1.47, 2.73, 2.16, 3.24, 2.65, 1.47, 1.48,
       1.3 , 1.41, 2.52, 4.04, 1.99, 2.28, 2.78, 3.44, 2.22, 1.9 , 1.83,
       1.76, 1.78, 1.75, 2.9 , 2.56, 2.35, 1.96, 1.42, 2.84, 2.02, 2.94,
       3.15, 1.99, 2.52]}, {'sadness': [1.67, 2.  , 3.43, 3.33, 5.06, 5.23, 3.88, 2.98, 3.77, 5.56, 3.4 ,
       3.96, 7.61, 8.91, 6.69, 4.6 , 3.84, 1.93, 3.59, 4.03, 3.27, 1.89,
       3.69, 2.  , 5.61, 2.1 , 3.54, 5.84, 4.83, 3.82, 5.3 , 3.93, 5.93,
       5.35, 1.8 , 2.79, 4.39, 2.28, 4.91, 2.07, 2.16, 2.87, 3.67, 4.96,
       3.2 , 6.15, 5.43, 3.7 , 3.35, 2.2 , 3.83, 5.28, 3.95, 2.54, 2.13,
       3.1 , 6.72, 3.66, 4.31, 5.91, 3.44, 3.87]}, {'boredom': [1.87, 2.34, 2.81, 3.4 , 3.05, 1.95, 1.67, 2.02, 4.12, 2.46, 3.42,
       3.39, 4.46, 3.83, 2.73, 1.46, 1.46, 3.3 , 3.85, 1.53, 3.23, 1.93,
       1.99, 2.63, 3.76, 2.88, 2.2 , 2.02, 1.54, 4.  , 1.73, 2.73, 4.39,
       3.31, 3.26, 1.82, 3.76, 2.29, 3.88, 2.96, 1.94, 1.72, 2.18, 3.29,
       2.2 , 2.61, 3.74, 3.82, 2.53, 2.28, 1.89, 1.88, 3.45, 2.93, 2.23,
       3.52, 2.99, 2.07, 1.5 , 1.63, 3.26, 1.74, 2.26, 2.89, 3.6 , 3.15,
       2.4 , 1.97, 2.02, 1.96, 2.59, 3.99, 2.01, 2.1 , 2.88, 2.4 , 3.33,
       3.97, 3.  , 3.12, 3.38]}]}

for feature in dict:
    fig = plt.figure()

    data_to_plot = []
    emotions = []
    for emotion_data in dict.get(feature):
        emotion = list(emotion_data)[0]
        emotions.append(emotion)
        data_to_plot.append(emotion_data[emotion])

    # print(emotions)
    # print(data_to_plot)
    ax = fig.add_subplot(111)
    ax.set_title(feature)
    ax.set_xticks(np.arange(1, len(emotions)+1))
    ax.set_xticklabels(emotions)
    ax.violinplot(data_to_plot)
    # plt.show()
    image_format = 'png'
    plot_name = os.path.join('plots/', feature + '.' + image_format)
    plt.savefig(plot_name, format=image_format)
    plt.close(fig)
